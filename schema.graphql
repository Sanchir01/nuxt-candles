schema {
  query: Query
  mutation: Mutation
}

"""
The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @goModel(model: String, models: [String!]) on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @hasRole(role: [Role]) on FIELD_DEFINITION

directive @inputUnion on INPUT_FIELD_DEFINITION

directive @sortRankInput on INPUT_FIELD_DEFINITION

type AllCandlesOk {
  candles: [Candles!]!
  totalCount(estimate: UInt! = 1000): TotalCountResolvingResult!
}

union AllCategoryResult = AllCandlesOk | InternalErrorProblem | VersionMismatchProblem

type AllColorOk {
  colors: [Color!]!
}

union AllColorResult = AllColorOk | InternalErrorProblem | VersionMismatchProblem

type AllOrdersOk {
  orders: [Orders!]!
}

union AllOrdersResult = AllOrdersOk | InternalErrorProblem | UnauthorizedProblem

type AllUserOrdersOk {
  orders: [Orders!]!
}

union AllUserOrdersResult = AllUserOrdersOk | InternalErrorProblem | UnauthorizedProblem

type AuthMutations {
  deleteToken: DeleteTokensResult
  login(input: LoginInput!): LoginResult!
  newTokens: NewTokensResult!
  registrations(input: RegistrationsInput!): RegistrationsResult!
}

type Candles {
  category_id: Uuid!
  color_id: Uuid!
  created_at: DateTime!
  description: String!
  id: Uuid!
  images: [String!]!
  price: Int!
  slug: String!
  title: String!
  updated_at: DateTime!
  version: UInt!
  weight: Int!
}

input CandlesByIdInput {
  id: Uuid!
}

type CandlesByIdOk {
  candle: Candles!
}

union CandlesByIdResult = CandlesByIdOk | InternalErrorProblem | VersionMismatchProblem

input CandlesBySlugInput {
  slug: String!
}

type CandlesBySlugOk {
  candle: Candles!
}

union CandlesBySlugResult = CandlesBySlugOk | InternalErrorProblem | VersionMismatchProblem

type CandlesCreateOk {
  id: Uuid!
}

input CandlesFilterInput {
  categoryId: Uuid
  colorId: Uuid
}

type CandlesMutation {
  createCandle(input: CreateCandleInput!): CandlesMutationResult!
}

union CandlesMutationResult = CandlesCreateOk | InternalErrorProblem | UnauthorizedProblem | VersionMismatchProblem

type CandlesQuery {
  allCandles(filter: CandlesFilterInput, pageNumber: PageNumber! = 1, pageSize: PageSize! = 20, sort: CandlesSortEnum): AllCategoryResult!
  candleById(input: CandlesByIdInput!): CandlesByIdResult!
  candleBySlug(input: CandlesBySlugInput!): CandlesBySlugResult!
}

enum CandlesSortEnum {
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRICE_ASC
  PRICE_DESC
  SORT_RANK_ASC
  SORT_RANK_DESC
}

type Category implements VersionInterface {
  created_at: DateTime!
  id: Uuid!
  slug: String!
  title: String!
  updated_at: DateTime!
  version: UInt!
}

input CategoryByIdInput {
  id: Uuid!
}

type CategoryByIdOk {
  category: Category
}

union CategoryByIdResult = CategoryByIdOk | InternalErrorProblem | VersionMismatchProblem

input CategoryBySlugInput {
  slug: String!
}

type CategoryBySlugOk {
  category: Category
}

union CategoryBySlugResult = CategoryBySlugOk | InternalErrorProblem | VersionMismatchProblem

type CategoryCreateOk {
  id: Uuid!
}

union CategoryCreateResult = CategoryCreateOk | InternalErrorProblem | UnauthorizedProblem | VersionMismatchProblem

type CategoryGetAllOk {
  category: [Category!]!
}

union CategoryGetAllResult = CategoryGetAllOk | InternalErrorProblem

type CategoryMutation {
  createCategory(input: CreateCategoryInput): CategoryCreateResult!
  delete(input: DeleteCategoryInput): DeleteCategoryResult
  updateCategory(input: UpdateCategoryInput!): UpdateCategoryResult!
}

type CategoryQuery {
  categoryById(input: CategoryByIdInput!): CategoryByIdResult!
  categoryBySlug(input: CategoryBySlugInput!): CategoryBySlugResult!
  getAllCategory: CategoryGetAllResult!
}

type Color {
  created_at: DateTime!
  id: Uuid!
  slug: String!
  title: String!
  updated_at: DateTime!
  version: UInt!
}

input ColorByIdInput {
  id: Uuid!
}

type ColorByIdOk {
  colors: Color!
}

union ColorByIdResult = ColorByIdOk | InternalErrorProblem | VersionMismatchProblem

input ColorBySlugInput {
  slug: String!
}

type ColorBySlugOk {
  colors: Color!
}

union ColorBySlugResult = ColorBySlugOk | InternalErrorProblem | VersionMismatchProblem

type ColorCreateOk {
  id: Uuid!
}

union ColorCreateResult = ColorCreateOk | InternalErrorProblem | UnauthorizedProblem | VersionMismatchProblem

type ColorMutation {
  createColor(input: CreateColorInput!): ColorCreateResult!
  delete(input: DeleteColorInput): DeleteColorResult
  updateColor(input: UpdateColorInput!): UpdateColorResult!
}

type ColorQuery {
  allColor: AllColorResult!
  colorById(input: ColorByIdInput!): ColorByIdResult!
  colorBySlug(input: ColorBySlugInput!): ColorBySlugResult!
}

input CreateCandleInput {
  category_id: Uuid!
  color_id: Uuid!
  description: String!
  images: [Upload!]!
  price: Int!
  title: String!
  weight: Int!
}

input CreateCategoryInput {
  title: String!
}

input CreateColorInput {
  title: String!
}

input CreateOrderInput {
  items: [CreateOrderItem!]
}

input CreateOrderItem {
  price: Int!
  productsId: Uuid!
  quantity: Int!
}

type CreateOrderOk {
  ok: String!
}

union CreateOrderResult = CreateOrderOk | InternalErrorProblem | UnauthorizedProblem

scalar DateTime

input DeleteCategoryInput {
  id: Uuid!
}

type DeleteCategoryOk {
  ok: Uuid!
}

union DeleteCategoryResult = DeleteCategoryOk | InternalErrorProblem | VersionMismatchProblem

input DeleteColorInput {
  id: Uuid!
}

type DeleteColorOk {
  ok: Uuid!
}

union DeleteColorResult = DeleteColorOk | InternalErrorProblem | VersionMismatchProblem

type DeleteTokensOk {
  ok: String!
}

union DeleteTokensResult = DeleteTokensOk | InternalErrorProblem

scalar Html

type InternalErrorProblem implements ProblemInterface {
  message: String!
}

type InvalidSortRankProblem implements ProblemInterface {
  message: String!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginOk {
  email: String!
  phone: String!
  role: Role!
  title: String!
}

union LoginResult = InternalErrorProblem | LoginOk | VersionMismatchProblem

type Mutation {
  auth: AuthMutations!
  candles: CandlesMutation!
  category: CategoryMutation!
  color: ColorMutation!
  orders: OrderMutations!
}

type NewTokensOk {
  token: String!
}

union NewTokensResult = InternalErrorProblem | NewTokensOk

type OrderItems {
  createdAt: DateTime!
  id: Uuid!
  orderId: Uuid!
  price: Int!
  product_id: Uuid!
  quantity: Int!
  status: String!
  updatedAt: DateTime!
  userId: Uuid!
  version: UInt!
}

type OrderMutations {
  createOrder(input: CreateOrderInput!): CreateOrderResult!
}

type OrderQuery {
  allOrders: AllOrdersResult!
  allUserOrders: AllUserOrdersResult!
}

type Orders {
  createdAt: DateTime!
  id: Uuid!
  status: String!
  total_amount: Int!
  updatedAt: DateTime!
  userId: Uuid!
  version: UInt!
}

scalar PageNumber

scalar PageSize

interface ProblemInterface {
  message: String!
}

type Query {
  candles: CandlesQuery
  category: CategoryQuery
  color: ColorQuery!
  orders: OrderQuery!
  user: UserQuery
}

input RegistrationsInput {
  email: String!
  password: String!
  phone: String!
  title: String!
}

type RegistrationsOk {
  email: String!
  phone: String!
  role: Role!
  title: String!
}

union RegistrationsResult = InternalErrorProblem | RegistrationsOk | VersionMismatchProblem

enum Role {
  admin
  guest
  user
}

input SortRankInput {
  next: String! = "z"
  prev: String! = "0"
}

type TotalCountResolvingOk {
  nextPage: Boolean!
  prevPage: Boolean!
  totalCount: UInt!
  totalCountPage: UInt!
}

union TotalCountResolvingResult = InternalErrorProblem | TotalCountResolvingOk | VersionMismatchProblem

scalar UInt

type UnauthorizedProblem implements ProblemInterface {
  message: String!
}

input UpdateCategoryInput {
  title: String!
}

type UpdateCategoryOk {
  id: Uuid!
}

union UpdateCategoryResult = InternalErrorProblem | UpdateCategoryOk | VersionMismatchProblem

input UpdateColorInput {
  title: String!
}

type UpdateColorOk {
  id: Uuid!
}

union UpdateColorResult = InternalErrorProblem | UpdateColorOk | VersionMismatchProblem

scalar Upload

scalar Url

type User {
  createdAt: DateTime!
  email: String!
  id: Uuid!
  password: String!
  phone: String!
  role: Role!
  title: String!
  updatedAt: DateTime!
  version: UInt!
}

type UserProfileOk {
  profile: User!
}

union UserProfileResult = InternalErrorProblem | UserProfileOk | VersionMismatchProblem

type UserQuery {
  profile: UserProfileResult!
}

scalar Uuid

interface VersionInterface {
  version: UInt!
}

type VersionMismatchProblem implements ProblemInterface {
  message: String!
}