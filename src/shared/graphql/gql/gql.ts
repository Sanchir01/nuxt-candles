/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "mutation Login($input: LoginInput!) {\n  auth {\n    login(input: $input) {\n      __typename\n      ... on LoginOk {\n        email\n        phone\n        role\n        title\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n    }\n  }\n}\n\nmutation Registrations($input: RegistrationsInput!) {\n  auth {\n    registrations(input: $input) {\n      __typename\n      ... on RegistrationsOk {\n        email\n        phone\n        role\n        title\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n    }\n  }\n}\n\nmutation NewToken {\n  auth {\n    newTokens {\n      __typename\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on NewTokensOk {\n        token\n      }\n    }\n  }\n}\n\nmutation DeleteToken {\n  auth {\n    deleteToken {\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on DeleteTokensOk {\n        ok\n      }\n    }\n  }\n}": types.LoginDocument,
    "query AllCandles($pageNumber: PageNumber!, $pageSize: PageSize!, $sort: CandlesSortEnum, $filter: CandlesFilterInput) {\n  candles {\n    allCandles(\n      pageNumber: $pageNumber\n      pageSize: $pageSize\n      sort: $sort\n      filter: $filter\n    ) {\n      __typename\n      ... on VersionMismatchProblem {\n        message\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on AllCandlesOk {\n        candles {\n          id\n          title\n          version\n          color_id\n          category_id\n          images\n          price\n          slug\n          description\n          weight\n        }\n      }\n    }\n  }\n}\n\nquery CandleById($input: CandlesByIdInput!) {\n  candles {\n    candleById(input: $input) {\n      __typename\n      ... on VersionMismatchProblem {\n        message\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on CandlesByIdOk {\n        candle {\n          id\n          title\n          version\n          color_id\n          category_id\n          images\n          price\n          slug\n          description\n          weight\n        }\n      }\n    }\n  }\n}": types.AllCandlesDocument,
    "query allCategory {\n  category {\n    getAllCategory {\n      __typename\n      ... on CategoryGetAllOk {\n        category {\n          id\n          title\n          slug\n        }\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n    }\n  }\n}\n\nquery CategoryById($input: CategoryByIdInput!) {\n  category {\n    categoryById(input: $input) {\n      ... on CategoryByIdOk {\n        category {\n          title\n          version\n          id\n        }\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n    }\n  }\n}\n\nmutation AddCategory($input: CreateCategoryInput) {\n  category {\n    createCategory(input: $input) {\n      __typename\n      ... on CategoryCreateOk {\n        id\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on UnauthorizedProblem {\n        message\n      }\n    }\n  }\n}": types.AllCategoryDocument,
    "query AllColor {\n  color {\n    allColor {\n      __typename\n      ... on AllColorOk {\n        colors {\n          id\n          title\n          slug\n        }\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n    }\n  }\n}\n\nquery ColorById($input: ColorByIdInput!) {\n  color {\n    colorById(input: $input) {\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n      ... on ColorByIdOk {\n        colors {\n          id\n          slug\n          title\n          version\n        }\n      }\n    }\n  }\n}\n\nmutation AddToColor($input: CreateColorInput!) {\n  color {\n    createColor(input: $input) {\n      __typename\n      ... on ColorCreateOk {\n        id\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on UnauthorizedProblem {\n        message\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n    }\n  }\n}": types.AllColorDocument,
    "query AllOrders {\n  orders {\n    allOrders {\n      __typename\n      ... on AllOrdersOk {\n        orders {\n          id\n          status\n          total_amount\n          userId\n          version\n        }\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on UnauthorizedProblem {\n        message\n      }\n    }\n  }\n}\n\nquery AllUserOrders {\n  orders {\n    allUserOrders {\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on UnauthorizedProblem {\n        message\n      }\n      ... on AllUserOrdersOk {\n        orders {\n          id\n          status\n          total_amount\n          userId\n          version\n        }\n      }\n    }\n  }\n}\n\nmutation Mutation($input: CreateOrderInput!) {\n  orders {\n    createOrder(input: $input) {\n      __typename\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on UnauthorizedProblem {\n        message\n      }\n      ... on CreateOrderOk {\n        ok\n      }\n    }\n  }\n}": types.AllOrdersDocument,
    "query UserById {\n  user {\n    profile {\n      __typename\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n      ... on UserProfileOk {\n        profile {\n          id\n          role\n        }\n      }\n    }\n  }\n}": types.UserByIdDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation Login($input: LoginInput!) {\n  auth {\n    login(input: $input) {\n      __typename\n      ... on LoginOk {\n        email\n        phone\n        role\n        title\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n    }\n  }\n}\n\nmutation Registrations($input: RegistrationsInput!) {\n  auth {\n    registrations(input: $input) {\n      __typename\n      ... on RegistrationsOk {\n        email\n        phone\n        role\n        title\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n    }\n  }\n}\n\nmutation NewToken {\n  auth {\n    newTokens {\n      __typename\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on NewTokensOk {\n        token\n      }\n    }\n  }\n}\n\nmutation DeleteToken {\n  auth {\n    deleteToken {\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on DeleteTokensOk {\n        ok\n      }\n    }\n  }\n}"): (typeof documents)["mutation Login($input: LoginInput!) {\n  auth {\n    login(input: $input) {\n      __typename\n      ... on LoginOk {\n        email\n        phone\n        role\n        title\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n    }\n  }\n}\n\nmutation Registrations($input: RegistrationsInput!) {\n  auth {\n    registrations(input: $input) {\n      __typename\n      ... on RegistrationsOk {\n        email\n        phone\n        role\n        title\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n    }\n  }\n}\n\nmutation NewToken {\n  auth {\n    newTokens {\n      __typename\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on NewTokensOk {\n        token\n      }\n    }\n  }\n}\n\nmutation DeleteToken {\n  auth {\n    deleteToken {\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on DeleteTokensOk {\n        ok\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllCandles($pageNumber: PageNumber!, $pageSize: PageSize!, $sort: CandlesSortEnum, $filter: CandlesFilterInput) {\n  candles {\n    allCandles(\n      pageNumber: $pageNumber\n      pageSize: $pageSize\n      sort: $sort\n      filter: $filter\n    ) {\n      __typename\n      ... on VersionMismatchProblem {\n        message\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on AllCandlesOk {\n        candles {\n          id\n          title\n          version\n          color_id\n          category_id\n          images\n          price\n          slug\n          description\n          weight\n        }\n      }\n    }\n  }\n}\n\nquery CandleById($input: CandlesByIdInput!) {\n  candles {\n    candleById(input: $input) {\n      __typename\n      ... on VersionMismatchProblem {\n        message\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on CandlesByIdOk {\n        candle {\n          id\n          title\n          version\n          color_id\n          category_id\n          images\n          price\n          slug\n          description\n          weight\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query AllCandles($pageNumber: PageNumber!, $pageSize: PageSize!, $sort: CandlesSortEnum, $filter: CandlesFilterInput) {\n  candles {\n    allCandles(\n      pageNumber: $pageNumber\n      pageSize: $pageSize\n      sort: $sort\n      filter: $filter\n    ) {\n      __typename\n      ... on VersionMismatchProblem {\n        message\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on AllCandlesOk {\n        candles {\n          id\n          title\n          version\n          color_id\n          category_id\n          images\n          price\n          slug\n          description\n          weight\n        }\n      }\n    }\n  }\n}\n\nquery CandleById($input: CandlesByIdInput!) {\n  candles {\n    candleById(input: $input) {\n      __typename\n      ... on VersionMismatchProblem {\n        message\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on CandlesByIdOk {\n        candle {\n          id\n          title\n          version\n          color_id\n          category_id\n          images\n          price\n          slug\n          description\n          weight\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query allCategory {\n  category {\n    getAllCategory {\n      __typename\n      ... on CategoryGetAllOk {\n        category {\n          id\n          title\n          slug\n        }\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n    }\n  }\n}\n\nquery CategoryById($input: CategoryByIdInput!) {\n  category {\n    categoryById(input: $input) {\n      ... on CategoryByIdOk {\n        category {\n          title\n          version\n          id\n        }\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n    }\n  }\n}\n\nmutation AddCategory($input: CreateCategoryInput) {\n  category {\n    createCategory(input: $input) {\n      __typename\n      ... on CategoryCreateOk {\n        id\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on UnauthorizedProblem {\n        message\n      }\n    }\n  }\n}"): (typeof documents)["query allCategory {\n  category {\n    getAllCategory {\n      __typename\n      ... on CategoryGetAllOk {\n        category {\n          id\n          title\n          slug\n        }\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n    }\n  }\n}\n\nquery CategoryById($input: CategoryByIdInput!) {\n  category {\n    categoryById(input: $input) {\n      ... on CategoryByIdOk {\n        category {\n          title\n          version\n          id\n        }\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n    }\n  }\n}\n\nmutation AddCategory($input: CreateCategoryInput) {\n  category {\n    createCategory(input: $input) {\n      __typename\n      ... on CategoryCreateOk {\n        id\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on UnauthorizedProblem {\n        message\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllColor {\n  color {\n    allColor {\n      __typename\n      ... on AllColorOk {\n        colors {\n          id\n          title\n          slug\n        }\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n    }\n  }\n}\n\nquery ColorById($input: ColorByIdInput!) {\n  color {\n    colorById(input: $input) {\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n      ... on ColorByIdOk {\n        colors {\n          id\n          slug\n          title\n          version\n        }\n      }\n    }\n  }\n}\n\nmutation AddToColor($input: CreateColorInput!) {\n  color {\n    createColor(input: $input) {\n      __typename\n      ... on ColorCreateOk {\n        id\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on UnauthorizedProblem {\n        message\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n    }\n  }\n}"): (typeof documents)["query AllColor {\n  color {\n    allColor {\n      __typename\n      ... on AllColorOk {\n        colors {\n          id\n          title\n          slug\n        }\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n    }\n  }\n}\n\nquery ColorById($input: ColorByIdInput!) {\n  color {\n    colorById(input: $input) {\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n      ... on ColorByIdOk {\n        colors {\n          id\n          slug\n          title\n          version\n        }\n      }\n    }\n  }\n}\n\nmutation AddToColor($input: CreateColorInput!) {\n  color {\n    createColor(input: $input) {\n      __typename\n      ... on ColorCreateOk {\n        id\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on UnauthorizedProblem {\n        message\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllOrders {\n  orders {\n    allOrders {\n      __typename\n      ... on AllOrdersOk {\n        orders {\n          id\n          status\n          total_amount\n          userId\n          version\n        }\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on UnauthorizedProblem {\n        message\n      }\n    }\n  }\n}\n\nquery AllUserOrders {\n  orders {\n    allUserOrders {\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on UnauthorizedProblem {\n        message\n      }\n      ... on AllUserOrdersOk {\n        orders {\n          id\n          status\n          total_amount\n          userId\n          version\n        }\n      }\n    }\n  }\n}\n\nmutation Mutation($input: CreateOrderInput!) {\n  orders {\n    createOrder(input: $input) {\n      __typename\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on UnauthorizedProblem {\n        message\n      }\n      ... on CreateOrderOk {\n        ok\n      }\n    }\n  }\n}"): (typeof documents)["query AllOrders {\n  orders {\n    allOrders {\n      __typename\n      ... on AllOrdersOk {\n        orders {\n          id\n          status\n          total_amount\n          userId\n          version\n        }\n      }\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on UnauthorizedProblem {\n        message\n      }\n    }\n  }\n}\n\nquery AllUserOrders {\n  orders {\n    allUserOrders {\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on UnauthorizedProblem {\n        message\n      }\n      ... on AllUserOrdersOk {\n        orders {\n          id\n          status\n          total_amount\n          userId\n          version\n        }\n      }\n    }\n  }\n}\n\nmutation Mutation($input: CreateOrderInput!) {\n  orders {\n    createOrder(input: $input) {\n      __typename\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on UnauthorizedProblem {\n        message\n      }\n      ... on CreateOrderOk {\n        ok\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query UserById {\n  user {\n    profile {\n      __typename\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n      ... on UserProfileOk {\n        profile {\n          id\n          role\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query UserById {\n  user {\n    profile {\n      __typename\n      ... on InternalErrorProblem {\n        message\n      }\n      ... on VersionMismatchProblem {\n        message\n      }\n      ... on UserProfileOk {\n        profile {\n          id\n          role\n        }\n      }\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;